<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: binary | Geek Woodworker]]></title>
  <link href="http://ifq.github.com/blog/categories/binary/atom.xml" rel="self"/>
  <link href="http://ifq.github.com/"/>
  <updated>2012-09-13T19:25:29+08:00</updated>
  <id>http://ifq.github.com/</id>
  <author>
    <name><![CDATA[靖天]]></name>
    <email><![CDATA[ifqqfi凹凸gmail刀com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux下批量转换文件编码格式]]></title>
    <link href="http://ifq.github.com/blog/2012/09/13/enconv-file-encode/"/>
    <updated>2012-09-13T00:00:00+08:00</updated>
    <id>http://ifq.github.com/blog/2012/09/13/enconv-file-encode</id>
    <content type="html"><![CDATA[<p>
工作中被要求所有的代码文件以gb2312-unix编码格式来存放。但是移植的SDK等外来的代码多是UTF-8格式的。另外一些同事使用source insight，似乎不好指定unix的换行符（具体我不清楚），经常出现以dos换行符结尾的文件。在emacs看这些文件很烦，要么忍受每行后边带个^M,要么Ctrl+X-Enter-r，切换成dos。
</p>


<p>
介于以上原因，新项目伊始，决定先打好基础，把所有文件都转换好一下先。linux下批量转换文件的编码格式，iconv是第一个找到的，但是不是很好用。之后找到一个好工具 enca。可以用来查看也可以转换。
</p>


<p>``` sh</p>

<h1>查看</h1>

<p>enca filename</p>

<h1>将当前目录下所有的代码文件转换到gb2312格式</h1>

<h1>enca方便之处是可以自动识别输入文件的编码，iconv则必须手动指定</h1>

<p>for i in <code>find . -name "*.[ch]"</code>; echo $i; do enconv -x gb2312 $i; done</p>

<h1>之后用sed将换行符全部转换为unix</h1>

<p>sed -i 's/\x0D//' *.c</p>

<h1>这个是看到的一个更改文件名的方法，mark一下</h1>

<p>find . -name "<em>.new" | sed 's/(.</em>).new$/mv "&amp;" "\1"/' | sh<br/>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百度博客导入octopress--自力更生本领大]]></title>
    <link href="http://ifq.github.com/blog/2012/09/10/baidu-blog-to-octo/"/>
    <updated>2012-09-10T00:00:00+08:00</updated>
    <id>http://ifq.github.com/blog/2012/09/10/baidu-blog-to-octo</id>
    <content type="html"><![CDATA[<p>
使用门户网站的博客系统最大的不爽就是受制于人，什么都不是自己的。网络在不断变化，形式不断在变化，谁也不能保证门户网站的博客不出什么幺蛾子，也不能保证自己不会喜新厌旧。于是想要自己写的那么点废话能够连续的，稳定的呆在某角落，自立门户是最safe的选择。
</p>


<p>
<img src="/rc/legacy/08704990f36425aca977a49e.jpg" width="500"  alt="导入过来的博客中的一张照片，当年喝绿豆稀饭后的legacy，小而强大～">
</p>


<p>
本文介绍我移动旧的百度博客的内容到octopress的方法。试想如果从baidu挪到其他门口的博客是怎么样的过程？幸运的话网站直接支持对接导入，不然就是找工具找工具找工具。但是导入到自由软件的octopress，就简单的多了。
</p>


<p>
下载了你的baidu博客的数据后（恰巧最近baidu博客升级，提供了用户下载自己内容的功能），解压进入blog子目录，敲如下几个命令，5分钟整个导出导入工作就完成了。（当然trans2octo脚本是我写好的）
</p>


<p><code>sh
cd /DIR/TO/BAIDU_DATA/
./trans2octo.pl blog_index.html
cp -r tmp /DIR/TO/BLOG/source/_post/legacy
cd /DIR/TO/BLOG
rake generate
rake _deploy
</code></p>

<!--more-->




<p>
有一点需要特别说明的：
</p>


<ul>
<li>本人perl只会最初级的，弄弄正则表达式什么的，如果有错误或者更好的办法请高手指点。
</li>
<li>这个脚本主要任务是把baidu导出的以序号命名的html根据博客时间转换为yyyy-mm-dd-cnt.html的页面，并去掉不必要的内容，以及对img标签进行转换。
</li>
<li>baidu导出的数据中不包括图片数据，图片依然链接到baidu网站。为了本地化，该脚本把所有用到的照片url记录到一个log文件，通过wget命令即可全部下载。具体看脚本内的说明。
</li>
<li>有2个问题没有解决
<ol>
<li>之前的留言没有好办法导过来，不知道哪位大哥有高招。
</li>
<li>baidu导出数据里没有tag，所以之前的tag也没有了。不过陈年的东西了，大多只是垫在下面让网站看起来不那么单薄。对于我来说是这样了，如果真要找东西，用搜索比tag要快些。
</li>
</ol>

</li>
</ul>




<p>
以下奉上脚本，欢迎留言交流～ 
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>"baidu blog trans2octo script"  (trans2octo.pl)</span> <a href='/code/trans2octo.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'><span class="c1"># 用法：</span>
</span><span class='line'><span class="c1"># trans2octo.pl blog_index.html</span>
</span><span class='line'><span class="c1"># 将blog目录下的baidu博客转换为octopress格式的博客，存入tmp文件夹。</span>
</span><span class='line'><span class="c1"># 文章中的img图片标签会自动替换为octopress格式，指向本地$IMGDIR目录下。</span>
</span><span class='line'><span class="c1"># 同时会生成imglist.log记录所有图片url，可使用 wget -i imglist.log</span>
</span><span class='line'><span class="c1"># 下载到本地，保存至$IMGDIR目录。</span>
</span><span class='line'><span class="c1"># [2012-09-10 一] IFQ</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span>   <span class="nn">File::</span><span class="n">Path</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># match汉字用，不想加载其他库，还有什么好做法？</span>
</span><span class='line'><span class="nv">$HZ</span> <span class="o">=</span> <span class="s">&quot;[\x80-\xFF][\x80-\xFF].*?&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1"># YAML Head</span>
</span><span class='line'><span class="nv">$PRE</span> <span class="o">=</span> <span class="s">&quot;---\nlayout: post\ntitle: \&quot;XXXTXXX\&quot;\ncomments: true\ncategories: [legacy]\n---\n\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1"># 替换img字符串</span>
</span><span class='line'><span class="nv">$IMG</span> <span class="o">=</span> <span class="s">&quot;{% img XXXPIC 800 %}&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1"># img 文件夹位置</span>
</span><span class='line'><span class="nv">$IMGDIR</span> <span class="o">=</span> <span class="s">&quot;/rc/legacy/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 创建临时文件夹</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!-</span><span class="n">e</span> <span class="s">&quot;tmp&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">print</span> <span class="s">&quot;create tmp dir.\n&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="nb">mkdir</span> <span class="s">&quot;./tmp&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="nv">@links</span> <span class="o">=</span> <span class="nv">$_</span> <span class="o">=~</span><span class="sr"> /\&lt;a(.*?)\&lt;\/a\&gt;/g</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="nb">open</span> <span class="n">IMGLIST</span><span class="p">,</span> <span class="s">&quot;&gt;./imglist.log&quot;</span> <span class="o">||</span> <span class="nb">die</span> <span class="s">&quot;open imglist fail.&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">foreach</span> <span class="p">(</span><span class="nv">@links</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="sr">/(\.\/blog\/.*?html).*?(\d{4})$HZ(\d{1,2})$HZ(\d{1,2}).* ($HZ)$/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="nv">$cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="c1"># 防止重名加cnt</span>
</span><span class='line'>			<span class="k">while</span><span class="p">(</span><span class="o">-</span><span class="n">e</span> <span class="p">(</span><span class="nv">$tgt</span> <span class="o">=</span> <span class="s">&quot;./tmp/$2-$3-$4-$cnt.html&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>				<span class="nv">$cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>			<span class="nb">open</span> <span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="s">&quot;&lt;$1&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="k">next</span><span class="p">;</span> <span class="c1">#die (&quot;Could not open file $1&quot;);</span>
</span><span class='line'>			<span class="nb">open</span> <span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="s">&quot;&gt;$tgt&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="nb">die</span> <span class="p">(</span><span class="s">&quot;Could not open file $tgt&quot;</span><span class="p">);</span>
</span><span class='line'>			<span class="k">print</span> <span class="s">&quot;$1 --&gt; $tgt : &quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="c1"># start trans</span>
</span><span class='line'>			<span class="k">while</span><span class="p">(</span><span class="sr">&lt;origin&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="c1"># get blog title</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="sr">/\&lt;title\&gt;(.*)\&lt;\/title\&gt;/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="nv">$tmp_pre</span> <span class="o">=</span> <span class="nv">$PRE</span><span class="p">;</span>
</span><span class='line'>					<span class="nv">$title</span> <span class="o">=</span> <span class="nv">$1</span><span class="p">;</span>
</span><span class='line'>					<span class="nv">$tmp_pre</span> <span class="o">=~</span> <span class="sr">s/XXXTXXX/$title/</span><span class="p">;</span>
</span><span class='line'>					<span class="k">print</span> <span class="n">target</span> <span class="nv">$tmp_pre</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>				<span class="c1"># del content before &lt;body&gt;</span>
</span><span class='line'>				<span class="nv">$_</span> <span class="o">=~</span> <span class="sr">s/^.*\&lt;body\&gt;//</span><span class="p">;</span>
</span><span class='line'>				<span class="c1"># del content after &lt;/body&gt;</span>
</span><span class='line'>				<span class="nv">$_</span> <span class="o">=~</span> <span class="sr">s/\&lt;\/body\&gt;.*$//</span><span class="p">;</span>
</span><span class='line'>				<span class="c1"># del h1 title</span>
</span><span class='line'>				<span class="nv">$_</span> <span class="o">=~</span> <span class="n">s</span><span class="o">|\</span><span class="sr">&lt;h1\&gt;</span><span class="o">.*</span><span class="p">?</span><span class="o">\</span><span class="sr">&lt;\/h1\&gt;</span><span class="o">||</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>				<span class="c1"># trans &lt;img&gt; to {% img %}</span>
</span><span class='line'>				<span class="nv">@imgs</span> <span class="o">=</span> <span class="nv">$_</span> <span class="o">=~</span><span class="sr"> /\&lt;img .*?src=&quot;(.*?)&quot;.*?\&gt;/</span><span class="p">;</span>
</span><span class='line'>				<span class="k">foreach</span> <span class="nv">$img_itr</span> <span class="p">(</span><span class="nv">@imgs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="nv">$tmp_img</span> <span class="o">=</span> <span class="nv">$IMG</span><span class="p">;</span>
</span><span class='line'>					<span class="nv">$url</span> <span class="o">=</span> <span class="nv">$img_itr</span><span class="p">;</span>
</span><span class='line'>					<span class="nv">$url</span> <span class="o">=~</span> <span class="sr">s/http.*\//$IMGDIR/</span><span class="p">;</span>
</span><span class='line'>					<span class="nv">$tmp_img</span> <span class="o">=~</span> <span class="sr">s/XXXPIC/$url/</span><span class="p">;</span>
</span><span class='line'>					<span class="nv">$_</span> <span class="o">=~</span> <span class="sr">s/\&lt;img .*src=&quot;$img_itr&quot;.*?\&gt;/$tmp_img/g</span><span class="p">;</span>
</span><span class='line'>					<span class="k">print</span> <span class="n">IMGLIST</span> <span class="s">&quot;$img_itr\n&quot;</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>				<span class="c1"># write to file</span>
</span><span class='line'>				<span class="k">print</span> <span class="n">target</span> <span class="nv">$_</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>			<span class="nb">close</span> <span class="n">origin</span><span class="p">;</span>
</span><span class='line'>			<span class="nb">close</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'>			<span class="k">print</span> <span class="s">&quot;done.\n&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">print</span> <span class="s">&quot;$_ trans fail\n&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="nb">close</span> <span class="n">IMGLIST</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>


<p>
博客里多一些废话也感觉厚重了一点，各位没事可以看看类别legacy的内容，有一些我以前在日本的照片游记之类。
</p>


<p>
过两天有空了把更老的csdn的博客内容也搬过来。
</p>


<p>
(baidu 百度 博客 搬家)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacs + org-mode + octopress + github]]></title>
    <link href="http://ifq.github.com/blog/2012/08/10/org-octopress/"/>
    <updated>2012-08-10T00:00:00+08:00</updated>
    <id>http://ifq.github.com/blog/2012/08/10/org-octopress</id>
    <content type="html"><![CDATA[<p>
网站基本上搭起来了，虽然不懂Ruby，Jekyll也只知道是个什么东西。但是就how-to问题，可以和大家分享下。如果你想建立静态博客，也许有点头绪。如果你恰巧也使用emacs+orgmode，那我们就有更多共同语言了：）
<!--more-->


</p>


<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">什么是静态博客</h2>
<div class="outline-text-2" id="text-1">

<p>  静态博客（Static Blog）。。就是静态网页组成的博客。与之对比的动态博客，也就是页面是动态生成的，博客内容依存于数据库，国内各大网站提供的博客系统大都是动态博客。
</p>
<p>
  静态博客的页面可以是手工通过制作html页面来维护，这样的话博客最基本的按日期管理、文章分类等特征都得手工完成，这么笨拙的办法可能没人喜欢。于是现在多是使用辅助工具帮助生成整个博客站点，文章自动按照日期管理、有类别或者TAG分类、还融合了留言板等其他技术，octopress就是其中一员。
</p>
</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">什么是octopress</h2>
<div class="outline-text-2" id="text-2">

<p>  说到 <a href="#www.octopress.org">octopress</a>，得先说说 <a href="http://jekyllrb.com/">jekyll</a>。 jekyll 可以把以日期为文件名的 <a href="http://en.wikipedia.org/wiki/Markdown">markdown</a> 格式的文本文件转换为html的静态博客。
</p><blockquote>

<p>Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile or Markdown and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server. 
</p>
</blockquote>


<p>
  可以理解为jekyll是实际转化生成静态站点的脚本程序，而octopress是套在jekyll外的一层封装，使得最终生成的站点上有更好的UI，更有风格，并且有更丰富的辅助功能（留言、代码展示、视频）。与octopress类似的还有<a href="http://jekyllbootstrap.com/">bootstrip</a>。 我在公司里记录一些东西也在用，只是觉得 octopress 对移动设备的支持更好，所以才打算在公开博客里使用它。
</p>
<p>
  生成和更新服务器的命令大致如下,每次写完内容后要做的操作：
``` sh  生成＆更新博客的命令
rake generate   #将source目录下的markdown文本生产为public目录下的blog
rake preview    #本地预览 localhost:4000
rake deploy     #根据public目录生成_deploy目录并上传github 
#上边的操作已经更新了网站服务器，以下是保存代码改动到github服务器的其他branch               
git add .
git commit -m "comments"
git push
```

</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">什么是emacs</h2>
<div class="outline-text-2" id="text-3">

<p>  <a href="http://en.wikipedia.org/wiki/Emacs">emacs</a> 是一个拥有强大扩展能力的文本编辑器，扩展能力强大到可以浏览网页、发微博、调试程序、管理日程，总之什么都可以做。我本人并不是一个all-in-emacs控，我不会用emacs做发微博这类的事情，但是还是很喜欢用它工作。它有几个特点吸引我：
</p><ul>
<li>免费。
</li>
<li>丰富的辅助开发功能，比如和SVN，GIT的融合，编译make的融合。
</li>
<li>快捷键便利。
</li>
<li>不断在更新，比如现在对多国语言的支持越来越好。
</li>
<li>全球范围内强大的技术支持，网上资源很多。
</li>
</ul>




  <img src="/rc/emacs.png" width="800" height="600" title=" " alt="emacs 启动界面">

<p>
  既然emacs这么好，如果熟悉它的话，自然写博客的时候也想用它了。单纯用emacs来写markdown格式的文本固然也可以，也有相应的emacs模式配合。但是寡人不熟悉markdown格式，相反对同类型的功能更强大的org-mode略知一二，所以就想用org格式来写博客。
</p>
</div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">什么是org-mode</h2>
<div class="outline-text-2" id="text-4">

<p>  <a href="http://orgmode.org/">org-mode</a> 是emacs的一种扩展模式，是在 <a href="http://emacswiki.org/emacs/OutlineMode">outline mode</a> 基础上发展出来的一种文本编辑辅助模式。适合在编写大纲（outline）组织结构的文档时使用。orgmode拥有丰富的快捷键由于编辑文档，支持url link，有强大的TODO、Agenda功能用于组织计划、有方便的表格功能、可以快捷的将org文档导出成html、pdf、laTex等格式的文档。
</p>
<p>
  <img src="/rc/orgmode.jpg" width="800" height="600" title=" " alt="简单的org模式的界面">
</p>
<p>
  这里重点说一下org模式下的html导出功能。org模式可以通过配置，将指定文件夹下的所有org文件导出到一个指定文件夹内（包括子文件的层级关系），org文件之间的link也会转化为html的link，因此直接使用这个功能就可以很方便的用org模式维护一个简单的静态网站。
</p>


<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>org模式publish配置示例 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq org-publish-project-alist
</span><span class='line'>      '(("note-org"
</span><span class='line'>         :base-directory "~/org/"
</span><span class='line'>         :publishing-directory "~/pub/"
</span><span class='line'>         :base-extension "org"
</span><span class='line'>         :recursive t
</span><span class='line'>         :publishing-function org-publish-org-to-html
</span><span class='line'>     :headline-levels 3
</span><span class='line'>     :html-extension "html"
</span><span class='line'>     :table-of-contents t
</span><span class='line'>     :link-home "/index.html"
</span><span class='line'>     :section-numbers t
</span><span class='line'>     :style "&lt;link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\"/>"
</span><span class='line'>     )
</span><span class='line'>
</span><span class='line'>        ("note-static"
</span><span class='line'>         :base-directory "~/org/"
</span><span class='line'>         :publishing-directory "~/pub/"
</span><span class='line'>         :recursive t
</span><span class='line'>         :base-extension "css\\|js\\|bmp\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|swf\\|zip\\|gz\\|txt\\|el\\|pl\\|mht\\|log\\|bin_\\|bat\\|tst\\|doc\\|docx\\|gz"
</span><span class='line'>         :publishing-function org-publish-attachment
</span><span class='line'>     )
</span><span class='line'>        ("note" 
</span><span class='line'>         :components ("note-org" "note-static")
</span><span class='line'>         :author "wangjingtian@xxx.com.cn"
</span><span class='line'>         )))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
  通过上边的设置我只需要一个快捷键就可以将 <code>~/org/</code> 下的org文件全部导成 html 存在 <code>~/pub</code> 下。
</p><ul>
<li>org子文件层级关系保留
</li>
<li>可以为导出的html指定css格式
</li>
<li>org文件夹内的其他格式的文件，如图片也可以设置一并导入pub目录
</li>
<li>可以自动生成org文件内的目录（TOC）
</li>
</ul>


</div>

</div>




<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">how-to 整合</h2>
<div class="outline-text-2" id="text-5">

<p>  终于到了org与octopress整合的部分了。关于整合 orgmode 和 octopress（jekyll），可以找到几种方式：
</p><ul>
<li>org 导出html，直接交给 jekyll 处理。这么做有个问题，org生成的html可能和 markdown 产生的html有差异，有的时候兼容性不好。比如，插入 <code>&lt;!--more--&gt;</code> 语句时，由于 org 生成的 html 充满了 div ，导致在有 headline 的情况下页面可能会乱掉。
</li>
<li>org 文件通过 emacs 的插件转换为 markdown 格式，再由 jekyll 处理。可以到<a href="https://github.com/alexhenning/ORGMODE-Markdown">这里</a> 找到相关资源。
</li>
<li><a href="http://orgmode.org/worg/org-tutorials/org-ruby.html">org-ruby</a>。 通过Ruby将 org 文件转化为 html，而不是通过emacs。<br/>
</li>
</ul>


<p>
  目前为止，我采用的还是第一种方法。
</p>
</div>

<div id="outline-container-5-1" class="outline-3">
<h3 id="sec-5-1">目录结构</h3>
<div class="outline-text-3" id="text-5-1">

<p>   以下是我现有的目录结构供参考
</p>


<pre class="example">+ blog               # 博客根目录
   + org             # org文件根目录
      + _post
   + source          # org导出根目录，也是octopress本身用于生成blog的根目录
      + _post        # markdown或者org导出的html存在这里
      + _include     # 这里是一些octopress的UI template文件
      + _layouts     # 这里也是
      + rc           # 我的照片等资源的文件夹
      + video        # 我的视频文件夹
      + ...
   + public          # 通过命令 source下的内容会自动导出到 该目录，包括自定义的 rc、video
      + blog         # 内部的子文件按年月日排列
      + rc
      + video
      + ...
   + _deploy         #通过部署命令生产，为了更新github而产生
      + ...
</pre>


</div>

</div>

<div id="outline-container-5-2" class="outline-3">
<h3 id="sec-5-2">emacs 设定</h3>
<div class="outline-text-3" id="text-5-2">

<p>   以下.emacs文件的设置有几个要点：
</p><ul>
<li>jekyll 本身针对 markdown 转化设计，但实际也支持html。但是org模式导出html时要设置为 <code>body-only</code> ，只导出html的body的部分，页面head和footer的内容由 jekyll 生成。
</li>
<li>最好不要导出目录（TOC）。
</li>
<li>base和publishing目录的设置
</li>
<li>虽然设置了资源文件的导出，但是我目前实际没有使用，而是直接把图片等资源文件放到 <code>source/rc/</code> 下。
</li>
</ul>


```
(setq org-publish-project-alist
      '(("blog-org"
         :base-directory "~/blog/org/"
         :publishing-directory "~/blog/source/"
         :base-extension "org"
         :recursive t
         :publishing-function org-publish-org-to-html
     :headline-levels 4
     :html-extension "html"
     :body-only t ;; Only export section between <body> </body>
     :table-of-contents nil
     )

        ("blog-static"
         :base-directory "~/blog/org/"
         :publishing-directory "~/blog/source/"
         :recursive t
         :base-extension "css\\|js\\|bmp\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|swf\\|zip\\|gz\\|txt\\|el\\|pl\\|mht\\|log\\|bin_\\|bat\\|tst\\|doc\\|docx\\|gz"
         :publishing-function org-publish-attachment
     )
        ("blog" 
         :components ("blog-org" "blog-static")
         :author "靖天"
         )))
```   
</div>

</div>

<div id="outline-container-5-3" class="outline-3">
<h3 id="sec-5-3">操作</h3>
<div class="outline-text-3" id="text-5-3">

<p>   假如今天要写这篇新的博客，大致过程如下：
</p><ul>
<li>用emacs创建 <code>blog/org/_post/2012-08-11-org-octopress.org</code> 这个文件。(日期的部分设置了快捷键直接添加)
</li>
<li>在文件的头部加入如下内容：(这部分可以通过 <a href="http://code.google.com/p/yasnippet/">YASnippet</a> 加速添加)



<pre class="example">#+BEGIN_HTML
---
layout: post
title: emacs + org-mode + octopress + github
categories: [binary, orgmode, octopress]
comments: true
---
ORG-LIST-END-MARKER
</pre>

</li>
<li>用org模式写博客的内容。
</li>
<li>用 <code>org-publish</code> 命令导出这个org文件。
</li>
<li><code>rake generate</code> 生成博客
</li>
<li><code>rake preview</code> 可以本地先检查下
</li>
<li><code>rake deploy</code> 部署到服务器
</li>
</ul>


<p>
以上内容仅是让还未入门的同鞋了解下用octopress写博客大概的流程是什么样子。如果你不熟悉命令行，或者觉得这种方式写博客过于繁琐，那可能并不适合你。但是如果你熟悉命令行或者脚本，可以给你写博客带来不一样的感受。比如要添加很多图片到一篇博客，可以用脚本便利目录下的所有图片自动生产相应的语句，或者做更酷的事情。
</p>
<p>
Thanks for watching. Any comments and suggestions are welcomed.
</p></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world - NO.-1 post]]></title>
    <link href="http://ifq.github.com/blog/2012/07/29/helloworld/"/>
    <updated>2012-07-29T00:00:00+08:00</updated>
    <id>http://ifq.github.com/blog/2012/07/29/helloworld</id>
    <content type="html"><![CDATA[<p>
welcome to my blog. This is just a "hello world" testing post.
重新建立一个blog这个念头在脑袋里已经有些日子了，关于原因以后再说，总之今天算一个“冒烟测试”。
</p>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">TEST</h2>
<div class="outline-text-2" id="text-1">




</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">视频</h3>
<div class="outline-text-3" id="text-1-1">

<p>   一个工厂里切OAK的视频，看着这过瘾。也许以后可以经常转点youtube的视频
   来给大家看。
   <div class="video-container">
   <video width='' height='' preload='none' controls poster='  /rc/dovetail-special.JPG'><source src='/video/hull.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video>
   </div>

</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">各国文字测试</h3>
<div class="outline-text-3" id="text-1-2">

<dl>
<dt>中文</dt><dd>上边已经试过了
</dd>
<dt>英文</dt><dd>上边也试过了
</dd>
<dt>日文</dt><dd>现在的linux下没装日文输入法。。<br/>
             テストご挨拶、はじめまして。
</dd>
</dl>




</div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">Quote</h3>
<div class="outline-text-3" id="text-1-3">


   <blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong> <cite><a href='http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html'>Welcome to Island Marketing</a></cite></footer></blockquote>


</div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">二级标题</h3>
<div class="outline-text-3" id="text-1-4">



</div>

<div id="outline-container-1-4-1" class="outline-4">
<h4 id="sec-1-4-1">三级标题</h4>
<div class="outline-text-4" id="text-1-4-1">



</div>

<div id="outline-container-1-4-1-1" class="outline-5">
<h5 id="sec-1-4-1-1">四级标题</h5>
<div class="outline-text-5" id="text-1-4-1-1">


</div>
</div>
</div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5">链接</h3>
<div class="outline-text-3" id="text-1-5">



</div>

<div id="outline-container-1-5-1" class="outline-4">
<h4 id="sec-1-5-1">ORG 链接</h4>
<div class="outline-text-4" id="text-1-5-1">

<p>    <a href="http://ifq.herokuapp.com">http://ifq.herokuapp.com</a>
    <a href="#sec-1-4-1-1">四级标题</a>
</p>


</div>
</div>

</div>

<div id="outline-container-1-6" class="outline-3">
<h3 id="sec-1-6">图片</h3>
<div class="outline-text-3" id="text-1-6">


</div>

<div id="outline-container-1-6-1" class="outline-4">
<h4 id="sec-1-6-1">ORG</h4>
<div class="outline-text-4" id="text-1-6-1">

<p>    <img src="file:///rc/dovetail-special.JPG"  alt="file:///rc/dovetail-special.JPG" />
</p>


</div>

</div>

<div id="outline-container-1-6-2" class="outline-4">
<h4 id="sec-1-6-2">markdown 格式</h4>
<div class="outline-text-4" id="text-1-6-2">


    <img src="/rc/dovetail-special.JPG" title="一个很特别的dovetail" alt="不知道这个pin和tail是怎么敲起来的啊">


</div>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
